package handlers

import (
	"encoding/json"
	"log"
	"net/http"
	"text/template"

	"github.com/gorilla/mux"
	"github.com/tntmmja/jaava2/backend/data"
)

// CreatePostHandler handles the creation of a new post
func CreatePostHandler(w http.ResponseWriter, r *http.Request) {
	// Retrieve the post data from the request body
	var post data.Post
	err := json.NewDecoder(r.Body).Decode(&post)
	if err != nil {
		log.Println(err)
		http.Error(w, "Bad Request", http.StatusBadRequest)
		return
	}

	// Create the post in the database
	err = data.CreatePost(&post)
	if err != nil {
		log.Println(err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	// Return a success response
	response := map[string]interface{}{
		"message": "Post created successfully",
	}
	jsonResponse, err := json.Marshal(response)
	if err != nil {
		log.Println(err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(jsonResponse)
}

// PostHandler handles the retrieval of a specific post
func PostHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
		return
	}

	// Retrieve the post ID from the URL parameters
	postID := mux.Vars(r)["id"]

	// Get the post from the database
	post, err := data.GetPost(postID)
	if err != nil {
		log.Println(err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	if post == nil {
		http.NotFound(w, r)
		return
	}

	// Return the post as JSON response
	jsonResponse, err := json.Marshal(post)
	if err != nil {
		log.Println(err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(jsonResponse)
}

// / FeedHandler retrieves the posts to display in the feed
func FeedHandler(w http.ResponseWriter, r *http.Request) {
	switch r.Method {
	case http.MethodGet:
		// Retrieve the posts from the database
		posts, err := data.GetPosts()
		if err != nil {
			log.Println(err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}

		// Render the feed.html template with the posts data
		tmpl, err := template.ParseFiles("./clientfrontend/templates/feed.html")
		if err != nil {
			log.Println(err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}

		// // Pass the posts data to the template
		// err = tmpl.Execute(w, struct {
		// 	Posts []data.Post
		// }{
		// 	Posts: posts,
		// })
		// if err != nil {
		// 	log.Println(err)
		// 	http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		// 	return
		// }

		// Pass the data to the template
		// it was intebded err = tmpl.Execute(w, posts) but it did not display posts
		err = tmpl.Execute(w, nil)
		if err != nil {
			log.Println(err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}

		// Getting posts from databas and displaying

		///////1
		// jsonData, err := json.Marshal(posts)
		// if err != nil {
		//     log.Println(err)
		//     http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		//     return
		// }

		//  w.Header().Set("Content-Type", "application/json")
		// // w.WriteHeader(http.StatusOK)
		// w.Write(jsonData)
		///////1
		// Set the Content-Type header to application/json
		w.Header().Set("Content-Type", "application/json")

		// Create a JSON encoder for the response writer
		encoder := json.NewEncoder(w)

		// Encode the posts data into the response stream
		err = encoder.Encode(posts)
		if err != nil {
			log.Println(err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}

	case http.MethodPost:
		// Handle POST request to create a new post
		var post data.Post
		err := json.NewDecoder(r.Body).Decode(&post)
		if err != nil {
			log.Println(err)
			http.Error(w, "Bad Request", http.StatusBadRequest)
			return
		}

		// Create the post in the database
		err = data.CreatePost(&post)
		if err != nil {
			log.Println(err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}

		//Return a success response
		response := map[string]interface{}{
			"message": "Post created successfully",
		}



		/////2
		jsonResponse, err := json.Marshal(response)
		if err != nil {
			log.Println(err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		w.Write(jsonResponse)
///////2

w.WriteHeader(http.StatusCreated)
	default:
		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
	}
}
